version: 2
name: replace-string-literals-with-constants
description: Replace hardcoded string literals in JavaScript files with named constants for improved maintainability

on:
  - repositoriesMatchingQuery: lang:javascript \"([\\\"'])(?:(?=(\\\\?))\\2.)*?\\1\" patterntype:regexp -file:node_modules -file:dist -file:test

steps:
  - run: |
      # Create a unique constants file in each repo if it doesn't exist
      if [ ! -f "src/constants.js" ]; then
        mkdir -p src
        echo "// Constants file generated by batch change\nexport const CONSTANTS = {};\n" > src/constants.js
      fi
      
      for file in ${{ join repository.search_result_paths " " }}; do
        # Skip constants file itself
        if [[ "$file" == *"constants.js" ]]; then
          continue
        fi
        
        # Process JavaScript files to extract string literals and replace them with constants
        node /tmp/replace-strings.js "$file"
      done
    container: node:16-alpine
    files:
      /tmp/replace-strings.js: |
        const fs = require('fs');
        const path = require('path');
        
        const filePath = process.argv[2];
        const fileContent = fs.readFileSync(filePath, 'utf8');
        
        // Find string literals with regex
        const stringLiteralRegex = /(['"])(?:(?=(\\?))\2.)*?\1/g;
        const stringLiterals = [...new Set(fileContent.match(stringLiteralRegex) || [])];
        
        // Skip if no string literals or only short ones (likely not worth extracting)
        if (stringLiterals.length === 0 || stringLiterals.every(s => s.length < 5)) {
          process.exit(0);
        }
        
        // Read constants file
        const constantsPath = path.join(process.cwd(), 'src/constants.js');
        let constantsContent = fs.readFileSync(constantsPath, 'utf8');
        
        let modifiedFileContent = fileContent;
        let importsAdded = false;
        
        // Create a mapping of string literals to constant names
        for (const literal of stringLiterals) {
          // Skip short literals or those that look like simple identifiers 
          if (literal.length < 5) continue;
          
          // Remove quotes and create valid constant name
          const value = literal.slice(1, -1);
          if (value.trim() === '') continue;
          
          // Create a constant name from the string content
          const constName = value
            .replace(/[^a-zA-Z0-9_]/g, '_')
            .replace(/_{2,}/g, '_')
            .toUpperCase()
            .slice(0, 50); // Limit length
          
          // Check if constant already exists in constants file
          if (!constantsContent.includes(`CONSTANTS.${constName}`)) {
            // Add to constants file
            constantsContent = constantsContent.replace(
              "export const CONSTANTS = {",
              `export const CONSTANTS = {\n  ${constName}: ${literal},`
            );
          }
          
          // Replace in file content
          modifiedFileContent = modifiedFileContent.replace(
            new RegExp(literal.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), 
            `CONSTANTS.${constName}`
          );
          
          // Add import if needed
          if (!importsAdded && modifiedFileContent.includes('CONSTANTS.')) {
            // Insert import at the top
            if (!modifiedFileContent.includes("import { CONSTANTS }")) {
              modifiedFileContent = `import { CONSTANTS } from '../src/constants.js';\n${modifiedFileContent}`;
              importsAdded = true;
            }
          }
        }
        
        // Write files if modified
        if (modifiedFileContent !== fileContent) {
          fs.writeFileSync(filePath, modifiedFileContent);
          fs.writeFileSync(constantsPath, constantsContent);
        }

changesetTemplate:
  title: Replace hardcoded string literals with constants
  body: |
    This changeset replaces hardcoded string literals in JavaScript files with references to named constants.
    
    ## Benefits
    - Improves code maintainability
    - Makes string values easier to update in a single location
    - Reduces the risk of typos when using the same string in multiple places
    - Makes the codebase more consistent
    
    All constants have been extracted to a central `src/constants.js` file, which is created if it doesn't already exist.
    
    ## Implementation Details
    - Only string literals longer than 4 characters were replaced
    - Constants are named based on the content of the string
    - Imports have been added where necessary
  branch: batch-changes/replace-string-literals
  commit:
    message: Replace hardcoded string literals with constants
  published: false